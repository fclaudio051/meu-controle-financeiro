"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.container = exports.DIContainer = void 0;
const FileUserRepository_1 = require("../repositories/FileUserRepository");
const FilePersonRepository_1 = require("../repositories/FilePersonRepository");
const FileEntryRepository_1 = require("../repositories/FileEntryRepository");
const AuthService_1 = require("../services/AuthService");
const PersonService_1 = require("../services/PersonService");
const EntryService_1 = require("../services/EntryService");
const AuthController_1 = require("../controllers/AuthController");
const PersonController_1 = require("../controllers/PersonController");
const EntryController_1 = require("../controllers/EntryController");
/**
 * Container de Inje√ß√£o de Depend√™ncia
 *
 * Este container implementa o padr√£o Singleton e gerencia todas as depend√™ncias
 * da aplica√ß√£o, seguindo o princ√≠pio de Dependency Inversion do SOLID.
 *
 * Garante que cada inst√¢ncia seja criada apenas uma vez (Singleton) e
 * que as depend√™ncias sejam injetadas corretamente.
 */
class DIContainer {
    // ===========================================
    // REPOSITORIES - Camada de Acesso a Dados
    // ===========================================
    /**
     * Retorna uma inst√¢ncia singleton do FileUserRepository
     */
    get userRepository() {
        if (!this._userRepository) {
            this._userRepository = new FileUserRepository_1.FileUserRepository();
            console.log("üóÑÔ∏è FileUserRepository instanciado");
        }
        return this._userRepository;
    }
    /**
     * Retorna uma inst√¢ncia singleton do FilePersonRepository
     */
    get personRepository() {
        if (!this._personRepository) {
            this._personRepository = new FilePersonRepository_1.FilePersonRepository();
            console.log("üóÑÔ∏è FilePersonRepository instanciado");
        }
        return this._personRepository;
    }
    /**
     * Retorna uma inst√¢ncia singleton do FileEntryRepository
     */
    get entryRepository() {
        if (!this._entryRepository) {
            this._entryRepository = new FileEntryRepository_1.FileEntryRepository();
            console.log("üóÑÔ∏è FileEntryRepository instanciado");
        }
        return this._entryRepository;
    }
    // ===========================================
    // SERVICES - Camada de L√≥gica de Neg√≥cio
    // ===========================================
    /**
     * Retorna uma inst√¢ncia singleton do AuthService
     * Injeta automaticamente o UserRepository
     */
    get authService() {
        if (!this._authService) {
            this._authService = new AuthService_1.AuthService(this.userRepository);
            console.log("‚öôÔ∏è AuthService instanciado com UserRepository");
        }
        return this._authService;
    }
    /**
     * Retorna uma inst√¢ncia singleton do PersonService
     * Injeta automaticamente PersonRepository e EntryRepository
     */
    get personService() {
        if (!this._personService) {
            this._personService = new PersonService_1.PersonService(this.personRepository, this.entryRepository);
            console.log("‚öôÔ∏è PersonService instanciado com PersonRepository e EntryRepository");
        }
        return this._personService;
    }
    /**
     * Retorna uma inst√¢ncia singleton do EntryService
     * Injeta automaticamente EntryRepository e PersonRepository
     */
    get entryService() {
        if (!this._entryService) {
            this._entryService = new EntryService_1.EntryService(this.entryRepository, this.personRepository);
            console.log("‚öôÔ∏è EntryService instanciado com EntryRepository e PersonRepository");
        }
        return this._entryService;
    }
    // ===========================================
    // CONTROLLERS - Camada de Apresenta√ß√£o
    // ===========================================
    /**
     * Retorna uma inst√¢ncia singleton do AuthController
     * Injeta automaticamente o AuthService
     */
    get authController() {
        if (!this._authController) {
            this._authController = new AuthController_1.AuthController(this.authService);
            console.log("üéÆ AuthController instanciado com AuthService");
        }
        return this._authController;
    }
    /**
     * Retorna uma inst√¢ncia singleton do PersonController
     * Injeta automaticamente o PersonService
     */
    get personController() {
        if (!this._personController) {
            this._personController = new PersonController_1.PersonController(this.personService);
            console.log("üéÆ PersonController instanciado com PersonService");
        }
        return this._personController;
    }
    /**
     * Retorna uma inst√¢ncia singleton do EntryController
     * Injeta automaticamente o EntryService
     */
    get entryController() {
        if (!this._entryController) {
            this._entryController = new EntryController_1.EntryController(this.entryService);
            console.log("üéÆ EntryController instanciado com EntryService");
        }
        return this._entryController;
    }
    // ===========================================
    // UTILIT√ÅRIOS
    // ===========================================
    /**
     * M√©todo para resetar todas as inst√¢ncias (√∫til para testes)
     */
    reset() {
        this._userRepository = undefined;
        this._personRepository = undefined;
        this._entryRepository = undefined;
        this._authService = undefined;
        this._personService = undefined;
        this._entryService = undefined;
        this._authController = undefined;
        this._personController = undefined;
        this._entryController = undefined;
        console.log("üîÑ Container resetado - todas as inst√¢ncias foram limpas");
    }
    /**
     * M√©todo para verificar quais depend√™ncias j√° foram instanciadas
     */
    getInstantiatedDependencies() {
        const instantiated = [];
        if (this._userRepository)
            instantiated.push("UserRepository");
        if (this._personRepository)
            instantiated.push("PersonRepository");
        if (this._entryRepository)
            instantiated.push("EntryRepository");
        if (this._authService)
            instantiated.push("AuthService");
        if (this._personService)
            instantiated.push("PersonService");
        if (this._entryService)
            instantiated.push("EntryService");
        if (this._authController)
            instantiated.push("AuthController");
        if (this._personController)
            instantiated.push("PersonController");
        if (this._entryController)
            instantiated.push("EntryController");
        return instantiated;
    }
    /**
     * M√©todo para pr√©-carregar todas as depend√™ncias (√∫til para aplica√ß√µes em produ√ß√£o)
     */
    preloadAll() {
        console.log("üöÄ Pr√©-carregando todas as depend√™ncias...");
        // Acessar todos os getters para for√ßar a instancia√ß√£o
        this.userRepository;
        this.personRepository;
        this.entryRepository;
        this.authService;
        this.personService;
        this.entryService;
        this.authController;
        this.personController;
        this.entryController;
        console.log("‚úÖ Todas as depend√™ncias foram pr√©-carregadas");
    }
}
exports.DIContainer = DIContainer;
/**
 * Inst√¢ncia singleton do container
 * Esta √© a √∫nica inst√¢ncia que deve ser usada em toda a aplica√ß√£o
 */
exports.container = new DIContainer();
/**
 * Para usar em desenvolvimento, voc√™ pode pr√©-carregar as depend√™ncias
 * Descomente a linha abaixo se quiser que todas sejam carregadas na inicializa√ß√£o
 */
// if (process.env.NODE_ENV === 'development') {
//   container.preloadAll();
// }
